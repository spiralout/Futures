<?php
require_once 'FutureMessageQueueInterface.php';

/**
 * IPC implementation of the Futures message queue interface
 *
 * @author Sean Crystal <sean.crystal@gmail.com>
 * @copyright 2011 Sean Crystal
 * @license http://www.opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @link https://github.com/spiralout/Futures
 */
class IPCFutureMessageQueue implements FutureMessageQueueInterface
{
    /** max value size */
    const SIZE = 16384;

    /** unique key for the message queue */
    const MSG_QUEUE_KEY = 0xFAC3;

    /**
     * Init the message queue
     */
    function init()
    {
        if (!($this->mqid = msg_get_queue(self::MSG_QUEUE_KEY))) {
            throw new Exception('Could not create message queue with key '. self::MSG_QUEUE_KEY);
        }
    }

    /**
     * Shutdown the message queue
     */
    function shutdown()
    {
        msg_remove_queue($this->mqid);
    }

    /**
     * Receive a message from the queue. Block if the queue is empty
     *
     * @param int $messageType
     * @return mixed
     */
    function receive($messageType)
    {
        if (!msg_receive(
            $this->mqid, 
            $messageType, 
            $returnedMsgType, 
            self::SIZE, 
            $value, 
            true, 
            0, 
            $this->lastError)
        ) {
            return false;
        }

        return $value;
    }

    /**
     * Receive a message from the queue but do not block if the queue is empty
     *
     * @param int $messageType
     * @return mixed
     */
    function receiveNoWait($messageType)
    {
        if (!msg_receive(
            $this->mqid, 
            $messageType, 
            $returnedMsgType, 
            self::SIZE, 
            $value, 
            true, 
            MSG_IPC_NOWAIT, 
            $this->lastError)
        ) {
            return false;
        }

        return $value;
    }

    /**
     * Send a message to the queue
     *
     * @param mixed $message
     * @param int $messageType
     * @return bool
     */
    function send($message, $messageType)
    {
        if (!msg_send($this->mqid, $messageType, $message, true, true, $this->lastError)) {
            return false;
        }

        return true;
    }

    /**
     * Get the last error message generated by this queue
     *
     * @return string
     */
    function getLastError()
    {
        return $this->lastError;
    }

    /** @var resource */
    private $mqid;      

    /** @var string */
    private $lastError;
}
